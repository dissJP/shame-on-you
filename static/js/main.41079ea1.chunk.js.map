{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Jp","scene","useGLTF","object","position","rotation","Math","PI","SkyBox","texture","useTexture","useThree","background","Earth","visible","castShadow","intensity","attach","args","specular","shininess","map","specularMap","normalMap","normalScale","THREE","App","fallback","Html","OrbitControls","autoRotate","minDistance","maxDistance","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAOA,SAASA,IACP,IACQC,EAAUC,YADN,UACJD,MACR,OACE,2BACEE,OAAQF,EACRG,SAAU,CAAC,EAAG,KAAM,GACpBC,SAAU,CAAC,EAAG,EAAI,GAAKC,KAAKC,GAAM,OAKxC,SAASC,IACP,IACMC,EAAUC,YADJ,sBAIZ,OAFkBC,cAAVV,MACFW,WAAaH,EACZ,KAGT,IAAMI,EAAQ,WACZ,OACE,uBACEC,SAAO,EACPV,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAU,EAAG,GAAKC,KAAKC,GAAM,IAAM,IAAMD,KAAKC,GAAM,IAAK,GACzDQ,YAAU,EAJZ,UAME,kCAAkBC,UAAW,KAC7B,gCAAgBC,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAI,MAChD,mCACEC,SAAU,QACVC,UAAW,EACXC,IAAKX,YAAW,4BAChBY,YAAaZ,YAAW,2BACxBa,UAAWb,YAAW,yBACtBc,YAAa,IAAIC,UAAc,IAAM,WA+B9BC,MAzBf,WACE,OACE,qCAEE,wFACA,yDACA,eAAC,IAAD,WACE,kCAAkBtB,SAAU,CAAC,GAAI,GAAI,GAAIY,UAAW,IACpD,kCAAkBZ,SAAU,EAAE,IAAK,IAAK,GAAIY,UAAW,IACvD,kCAAkBZ,SAAU,CAAC,EAAG,EAAG,GAAIY,UAAW,IAClD,kCAAkBZ,SAAU,CAAC,GAAI,GAAI,GAAIY,UAAW,IACpD,eAAC,WAAD,CAAUW,SAAU,cAACC,EAAA,EAAD,wBAApB,UACE,wBAAOvB,SAAU,CAAE,GAAKC,KAAKC,GAAM,IAAK,EAAG,GAA3C,UACE,cAACP,EAAD,IACA,cAAC,EAAD,OAEF,cAACQ,EAAD,OAEF,cAACqB,EAAA,EAAD,CAAeC,YAAY,EAAMC,YAAa,EAAGC,YAAa,OAEhE,oBAAIC,UAAU,QAAd,yECzDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41079ea1.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { Suspense } from \"react\";\nimport { Canvas, useThree } from \"@react-three/fiber\";\nimport { useTexture, Html, OrbitControls, useGLTF } from \"@react-three/drei\";\n\nimport \"./App.css\";\n\nfunction Jp() {\n  const url = \"jp.glb\";\n  const { scene } = useGLTF(url);\n  return (\n    <primitive\n      object={scene}\n      position={[0, 2.26, 0]}\n      rotation={[0, 0, (10 * Math.PI) / 180]}\n    />\n  );\n}\n\nfunction SkyBox() {\n  const url = \"eQ9y7xBeY4-new.jpg\";\n  const texture = useTexture(url);\n  const { scene } = useThree();\n  scene.background = texture;\n  return null;\n}\n// \"Environmentally & friendly\" nuclear sewage\nconst Earth = () => {\n  return (\n    <mesh\n      visible\n      position={[0, 0, 0]}\n      rotation={[(-54 * Math.PI) / 180, (128 * Math.PI) / 180, 0]}\n      castShadow\n    >\n      <directionalLight intensity={0.5} />\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n      <meshBasicMaterial\n        specular={0x333333}\n        shininess={5}\n        map={useTexture(\"earth_atmos_2048_hfs.jpg\")}\n        specularMap={useTexture(\"earth_specular_2048.jpg\")}\n        normalMap={useTexture(\"earth_normal_2048.jpg\")}\n        normalScale={new THREE.Vector2(0.85, 0.85)}\n      />\n    </mesh>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      {/* <h2>WTF is that 14.700?</h2> */}\n      <h2>Olympic referee: Landing on the earth, Perfect! 14.700</h2>\n      <h1>Tokyo2020 shame on you!</h1>\n      <Canvas>\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <directionalLight position={[-10, -10, -5]} intensity={1} />\n        <directionalLight position={[0, 0, 5]} intensity={1} />\n        <directionalLight position={[10, 0, -5]} intensity={1} />\n        <Suspense fallback={<Html>Loading..</Html>}>\n          <group rotation={[(45 * Math.PI) / 180, 0, 0]}>\n            <Jp />\n            <Earth />\n          </group>\n          <SkyBox />\n        </Suspense>\n        <OrbitControls autoRotate={true} minDistance={3} maxDistance={6} />\n      </Canvas>\n      <h2 className=\"about\">Diss by 鼻毛分叉105度 from Bilibili</h2>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}